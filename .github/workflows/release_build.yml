name: Push & Publish Release, Build & Push Docker image

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    # Runs every day at 5:28 AM UTC
    - cron: '28 5 * * *'

jobs:
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Build & Push Docker image
      packages: write  # Push & Publish Release

    steps:
      - name: 📥 Checkout code with full history and tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Check if commits exist since latest tag
        id: check_commits
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
          echo "commit_count=$COUNT" >> $GITHUB_OUTPUT

      - name: 📃 Get list of changed files
        if: steps.check_commits.outputs.commit_count != '0'
        id: changed_files
        run: |
          echo "CHANGED=$(git diff --name-only HEAD^ HEAD | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "COUNT=$(git diff --name-only HEAD^ HEAD | wc -l)" >> $GITHUB_OUTPUT

      - name: 🔢 Determine version
        if: steps.check_commits.outputs.commit_count != '0'
        id: version
        run: |
          VERSION_FILE="manifest.json"
          DEFAULT_VERSION="1.00.000"

          if [ -f "$VERSION_FILE" ]; then
            HAS_VERSION=$(jq 'has("version")' "$VERSION_FILE")
            if [ "$HAS_VERSION" = "true" ]; then
              VERSION=$(jq -r '.version' "$VERSION_FILE")
              [ "$VERSION" = "null" ] && VERSION="$DEFAULT_VERSION"
            else
              VERSION="$DEFAULT_VERSION"
            fi
          else
            VERSION="$DEFAULT_VERSION"
          fi

          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          COUNT="${{ steps.changed_files.outputs.COUNT }}"

          if [ "$COUNT" -ge 3 ]; then
            MAJOR=$((10#$MAJOR + 1))
            MINOR=00
            PATCH=000
          elif [ "$COUNT" -eq 2 ]; then
            MINOR=$((10#$MINOR + 1))
            PATCH=000
          elif [ "$COUNT" -eq 1 ]; then
            PATCH=$((10#$PATCH + 1))
          fi

          NEW_VERSION=$(printf "%d.%02d.%03d" "$MAJOR" "$MINOR" "$PATCH")
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          ZIP_NAME="${REPO_NAME}-${NEW_VERSION}.zip"

          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: 🛠 Update or create manifest.json
        if: steps.check_commits.outputs.commit_count != '0'
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          VERSION_FILE="manifest.json"
          AUTHOR="Ivan Carlos"

          if [ -f "$VERSION_FILE" ]; then
            HAS_VERSION=$(jq 'has("version")' "$VERSION_FILE")
            if [ "$HAS_VERSION" = "true" ]; then
              jq --arg v "$VERSION" --arg a "$AUTHOR" '.version = $v | .author = $a' "$VERSION_FILE" > tmp.json && mv tmp.json "$VERSION_FILE"
            else
              jq --arg v "$VERSION" --arg a "$AUTHOR" '. + {version: $v, author: $a}' "$VERSION_FILE" > tmp.json && mv tmp.json "$VERSION_FILE"
            fi
          else
            echo "{ \"version\": \"$VERSION\", \"author\": \"$AUTHOR\" }" > "$VERSION_FILE"
          fi

      - name: 💾 Commit and push updated manifest.json
        if: steps.check_commits.outputs.commit_count != '0'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add manifest.json
          git commit -m "Update manifest version to ${{ steps.version.outputs.VERSION }} [▶️]" || echo "Nothing to commit"
          git push origin main

      - name: 📦 Create ZIP package (excluding README.md)
        if: steps.check_commits.outputs.commit_count != '0'
        run: |
          ZIP_NAME="${{ steps.version.outputs.ZIP_NAME }}"
          zip -r "$ZIP_NAME" . -x ".git/*" ".github/*" "README.md"

      - name: 🚀 Create GitHub Release
        if: steps.check_commits.outputs.commit_count != '0'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.VERSION }}"
          name: "${{ steps.version.outputs.REPO_NAME }} v${{ steps.version.outputs.VERSION }}"
          body: |
            ### Changelog
            Files changed in this release:

            ${{ steps.changed_files.outputs.CHANGED }}
          files: ${{ steps.version.outputs.ZIP_NAME }}

      # ---------- 🐳🚀 DOCKER IMAGE BUILD & PUSH STEPS 🐋📦 ----------
      - name: 🔍 Check if Dockerfile exists
        if: steps.check_commits.outputs.commit_count != '0'
        id: dockerfile_check
        run: |
          if [ -f Dockerfile ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 🛠 Set up Docker Buildx
        if: steps.check_commits.outputs.commit_count != '0' && steps.dockerfile_check.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        if: steps.check_commits.outputs.commit_count != '0' && steps.dockerfile_check.outputs.exists == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build and Push Docker image
        if: steps.check_commits.outputs.commit_count != '0' && steps.dockerfile_check.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
